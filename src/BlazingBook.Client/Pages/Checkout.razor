@page "/checkout"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="main">
    <AuthorizeView Context="authContext">
        <NotAuthorized>
            <h2>Redirecting you...</h2>
        </NotAuthorized>
        <Authorized>
            <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="OrderState.PlaceOrder">
                <div class="checkout-cols">
                    <div class="checkout-order-details">
                        <h4>Review order</h4>
                        <BasketReview Basket="@OrderState.BasketList" />
                    </div>

                    <div class="checkout-delivery-address">
                        <h4>Deliver to...</h4>
                        <AddressEditor Address="OrderState.Order.DeliveryAddress" />
                    </div>
                </div>

                <button type="submit" class="checkout-button btn btn-warning" disabled="@OrderState.isSubmitting">
                    Place order
                </button>

                <DataAnnotationsValidator />
            </EditForm>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
            // The server won't accept orders from unauthenticated users, so avoid
            // an error by making them log in at this point
            await LocalStorage.SetAsync(JSRuntime, "currentorder", OrderState.Order);
            NavigationManager.NavigateTo("user/signin?redirectUri=/checkout", true);
        }

        // Try to recover any temporary saved order
        if (!OrderState.BasketList.Any())
        {
            var savedOrder = await LocalStorage.GetAsync<Order>(JSRuntime, "currentorder");
            if (savedOrder != null)
            {
                OrderState.ReplaceOrder(savedOrder);
                await LocalStorage.DeleteAsync(JSRuntime, "currentorder");
            }
            else {
                // There's nothing check out - go to home
                NavigationManager.NavigateTo("");
            }
        }

        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
    }

    async Task RequestNotificationSubscriptionAsync(){
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null){
            await HttpClient.PutJsonAsync<object>("notifications/subscribe", subscription);
        }
    }
}
