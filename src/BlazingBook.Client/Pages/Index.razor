@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState
@implements IDisposable
@inject IJSRuntime IJSRuntime
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider browserDateTimeProvider

@if (Order.Books.Any()) {
<Sidebar @ref="sidebar">
    <SidebarContent>
        <SidebarNavigation>
                <SidebarLabel>Shopping Bag <NavBasket /></SidebarLabel>
                    <SidebarItem>
                        @foreach (var configuredBook in Order.Books) {
                            <ConfiguredBookItem BookCustom="configuredBook" OnRemoved="@(() => RemoveBook(configuredBook))" />
                        }
                    </SidebarItem>
                    <SidebarItem>
                        <div class="order-total @(Order.Books.Any() ? "" : "hidden")">
                            Total:
                    
                            <span class="total-price">@Order.GetFormattedTotalPrice()</span>
                            <a href="checkout">
                                <Button Color="Color.Warning" disabled="@(Order.Books.Count == 0)">
                                Order
                                </Button>
                            </a>
                        </div>
                    </SidebarItem>
        </SidebarNavigation>
    </SidebarContent>
</Sidebar>
}

<div class="main">
    <Column ColumnSize="ColumnSize.Is4" Class="text-center mx-auto">
        <TextEdit Placeholder="Search..." @bind-Text="@search"  @onblur="() => OrderState.SearchBooks(search)"/>
    </Column>

    @if (OrderState.BooksApi != null) {
            <Table Margin="Margin.Is4.OnY">
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>Title</TableHeaderCell>
                        <TableHeaderCell>Author</TableHeaderCell>
                        <TableHeaderCell>Language</TableHeaderCell>
                        <TableHeaderCell>Downloads</TableHeaderCell>
                        <TableHeaderCell>Fav</TableHeaderCell>
                    </TableRow>
                </TableHeader>
            @foreach(var item in OrderState.BooksApi.Results){
                <TableBody>
                    <TableRow>
                        <TableRowCell>@item.Title</TableRowCell>
                        <TableRowCell>@item.Authors.Select(c => c.Name).FirstOrDefault()</TableRowCell>
                        <TableRowCell>@item.Languages.FirstOrDefault()</TableRowCell>
                        <TableRowCell>@item.DownloadCount</TableRowCell>
                        <TableRowCell>
                            <Button @onclick="@(() => OrderState.AddToWishList(null, item))">
                                <span class="@(OrderState.WishList.Any(w => w.BookId == item.Id) ? "heart-filled" : "heart")"></span>
                            </Button></TableRowCell>
                    </TableRow>
                </TableBody>
            }
            </Table>
    }
    @if (OrderState.Bookbases != null) {
        <CardGroup>
            @foreach (var item in OrderState.Bookbases){
            <Column ColumnSize="ColumnSize.Is4.OnTablet.Is3.OnWidescreen.Is12.OnMobile">
                <Card Margin="Margin.Is4.OnY">
                        <CardImage src="@item.ImageUrl">
                        </CardImage>
                        <CardBody>
                            <CardTitle>@item.Title</CardTitle>
                            <CardSubtitle>@item.Author</CardSubtitle>
                            <CardText class="price">@CultureInfo.CurrentUICulture.NumberFormat.CurrencySymbol @item.GetFormattedBasePrice()</CardText>
                            <Button @onclick="@(() => OrderState.ShowConfigureBookDialog(item))">
                                <span class="@(OrderState.Order.Books.Select(w => w.BookBase).Any(w => w.Id == item.Id) ? "shopping-filled" : "shopping")"></span>
                            </Button>
                            <Button @onclick="@(() => OrderState.AddToWishList(item, null))">
                                <span class="@(OrderState.WishList.Any(w => w.BookId == item.Id) ? "heart-filled" : "heart")"></span>
                            </Button>
                        </CardBody>
                </Card>
            </Column>
            }
        </CardGroup>
    }
</div>


<TemplatedDialog Show="OrderState.ShowingConfigureDialog">
    <ConfigureBookDialog
        BookCustom="OrderState.ConfiguringBook"
        OnCancel="OrderState.CancelConfigureBookDialog"
        OnConfirm="OrderState.ConfirmConfigureBookDialog" />
</TemplatedDialog>

@code {
    Sidebar sidebar;
    void ToggleSidebar(){
        sidebar.Toggle();
    }
    string search;
    Order Order => OrderState.Order;
    protected async override Task OnInitializedAsync() {
        OrderState.OnChange += StateHasChanged;
        OrderState.Bookbases = await HttpClient.GetJsonAsync<List<BookBase>>("bookbase");
        await OrderState.GetWishes();
    }

    protected override void OnParametersSet() {
        OrderState.OnChange += StateHasChanged;
    }
    public void Dispose() {
        OrderState.OnChange -= StateHasChanged;
    }

    async Task RemoveBook(BookCustom configuredBook) {
        if (await JS.Confirm($"Remove {configuredBook.BookBase.Title} book from the order?")) {
            OrderState.RemoveConfiguredBook(configuredBook);
        }
    }
}