@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="main">
    <Column ColumnSize="ColumnSize.IsHalf">
        <TextEdit Placeholder="Search..." @bind-Text="@search"/>
    </Column>
    @if (specials != null) {
        <CardGroup>
            @foreach (var special in specials){
                <Column ColumnSize="ColumnSize.IsHalf">
                    <Card Margin="Margin.Is4.OnY">
                        <Button @onclick="@(() => OrderState.ShowConfigureBookDialog(special))">
                            <CardImage src="@special.ImageUrl">
                            </CardImage>
                                <CardBody>
                                    <CardTitle>@special.Name</CardTitle>
                                    <CardSubtitle>@special.Description</CardSubtitle>
                                    <CardText class="price">@special.GetFormattedBasePrice()</CardText>
                                </CardBody>
                        </Button>
                    </Card>
                </Column>
            }
        </CardGroup>
    }
</div>

<Sidebar Background="Background.Transparent" ThemeContrast="ThemeContrast.Light">
    <SidebarContent>
        <SidebarBrand>
            Wish-List
        </SidebarBrand>
    @if (Order.Books.Any()) {
        <SidebarItem>
            @foreach (var configuredBook in Order.Books) {
                <ConfiguredBookItem Book="configuredBook" OnRemoved="@(() => RemoveBook(configuredBook))" />
            }
        </SidebarItem>
    }

    <div class="order-total @(Order.Books.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@Order.GetFormattedTotalPrice()</span>
        <a href="checkout">
            <Button Color="Color.Warning" disabled="@(Order.Books.Count == 0)">
            Order
            </Button>
        </a>
    </div>
    </SidebarContent>
</Sidebar>

<TemplatedDialog Show="OrderState.ShowingConfigureDialog">
    <ConfigureBookDialog
        Book="OrderState.ConfiguringBook"
        OnCancel="OrderState.CancelConfigureBookDialog"
        OnConfirm="OrderState.ConfirmConfigureBookDialog" />
</TemplatedDialog>

@code {
    Sidebar sidebar;
    SidebarSubItem mailSidebarSubItems;
    SidebarSubItem appsSidebarSubItems;

    void ToggleSidebar(){
        sidebar.Toggle();
    }
    string search;
    List<BookSpecial> specials;
    Order Order => OrderState.Order;

    protected async override Task OnInitializedAsync() {
        specials = await HttpClient.GetJsonAsync<List<BookSpecial>>("specials");
    }

    async Task RemoveBook(Book configuredBook) {
        if (await JS.Confirm($"Remove {configuredBook.Special.Name} book from the order?")) {
            OrderState.RemoveConfiguredBook(configuredBook);
        }
    }
}