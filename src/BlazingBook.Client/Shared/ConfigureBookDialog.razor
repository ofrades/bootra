@inject HttpClient HttpClient

<div class="dialog-title">
    <h2>@BookCustom.BookBase.Title</h2>
    @BookCustom.BookBase.Author
</div>
<form class="dialog-body">
    <div>
        <label>Size:</label>
        <input type="range" min="@BookCustom.MinimumSize" max="@BookCustom.MaximumSize" step="1" @bind="BookCustom.Size" @bind:event="oninput" />
        <span class="size-label">
            @(BookCustom.Size)" (@(BookCustom.GetFormattedTotalPrice()))
        </span>
    </div>
    <div>
        <label>Extras:</label>
        @if (extras == null)
        {
            <select class="custom-select" disabled>
                <option>(loading...)</option>
            </select>
        }
        else if (BookCustom.Extras.Count >= 6)
        {
            <div>(maximum reached)</div>
        }
        else
        {
            <select class="custom-select" @onchange="ExtraSelected">
                <option value="-1" disabled selected>(select)</option>
                @for (var i = 0; i < extras.Count; i++)
                {
                    <option value="@i">@extras[i].Name - (@(extras[i].GetFormattedPrice()))</option>
                }
            </select>
        }
    </div>

    <div class="extras">
        @foreach (var item in BookCustom.Extras)
        {
            <div class="extra">
                @item.Extra.Name
                <span class="extra-price">@item.Extra.GetFormattedPrice()</span>
                <Button @onclick="@(() => RemoveExtra(item.Extra))"><span class="iconify" data-icon="ant-design:close-outlined" data-inline="false"></span></Button>
            </div>
        }
    </div>
</form>

<div class="dialog-buttons">
    <button class="btn btn-secondary mr-auto" @onclick="@OnCancel">Cancel</button>
    <span class="mr-center">
        Price: <span class="price">@(BookCustom.GetFormattedTotalPrice())</span>
    </span>
    <button class="btn btn-success ml-auto" @onclick="@OnConfirm">Order ></button>
</div>

@code {
    List<Extra> extras;

    [Parameter] public BookCustom BookCustom { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    protected async override Task OnInitializedAsync()
    {
        extras = await HttpClient.GetJsonAsync<List<Extra>>("extras");
    }

    void ExtraSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            AddExtra(extras[index]);
        }
    }

    void AddExtra(Extra extra)
    {
        if (BookCustom.Extras.Find(pt => pt.Extra == extra) == null)
        {
            BookCustom.Extras.Add(new BookExtra() { Extra = extra });
        }
    }

    void RemoveExtra(Extra extra)
    {
        BookCustom.Extras.RemoveAll(pt => pt.Extra == extra);
    }
}
