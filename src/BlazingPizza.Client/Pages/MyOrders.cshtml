@page "/myorders"
@*@implements IDisposable*@
@inject HttpClient HttpClient

<div class="main px-4 py-4">
    @if (orders == null)
    {
        <text>Loading...</text>
    }
    else if (orders.Count == 0)
    {
        <h2>No orders placed</h2>
        <a class="btn btn-success" href="">Order some pizza</a>
    }
    else
    {
        <div class="list-group">
            @foreach (var order in orders)
            {
                <div class="list-group-item d-flex">
                    <div class="col m-auto">
                        <h5 class="mb-1">
                            @order.CreatedTime.ToLongDateString()
                        </h5>
                        Items:
                        <strong>@order.Pizzas.Count()</strong>;
                        Total price:
                        <strong>£@order.Pizzas.Sum(p => p.GetTotalPrice()).ToString("0.00")</strong>
                    </div>
                    <div class="col m-auto">
                        Status: <strong>@order.Status.ToDisplayString()</strong>
                    </div>
                    <div class="col m-auto flex-grow-0">
                        <a href="myorders/@order.OrderId" class="btn btn-success">
                            Track &gt;
                        </a>
                    </div>
                </div>
            }
        </div>
    }

    @*
    <DeliveryMap 
        Id="deliveryMap"
        Height="300"
        Width="300"
        Center="@center"
        Zoom="13"
        Start="@start"
        End="@end"
        Driver="@driver" />
    *@
</div>

@functions {
    List<Order> orders;

    protected override async Task OnInitAsync()
    {
        orders = await HttpClient.GetJsonAsync<List<Order>>("/orders");
    }

    /*
    Point center = new Point() { X = 51.5001, Y = -0.1239, };
    Marker start = new Marker() { Description = "Blazing Pizza HQ", X = 51.5098, Y = -0.124, };
    Marker driver = new Marker() { Description = "Your friendly Blazing Pizza driver", X = 51.5098, Y = -0.124, };
    Marker end = new Marker() { Description = "Queen Elizabeth II Center", X = 51.49811, Y = -0.12863, };

    bool animating;
    int step;
    int totalSteps = 20;

    protected override void OnInit()
    {
        animating = true;
        _ = UpdatePosition();
    }

    void IDisposable.Dispose()
    {
        animating = false;
    }

    async Task UpdatePosition()
    {
        await Task.Delay(TimeSpan.FromSeconds(1));
        if (!animating)
        {
            return;
        }

        step++;
        driver.X = start.X + (end.X - start.X) * ((double)step / (double)totalSteps);
        driver.Y = start.Y + (end.Y - start.Y) * ((double)step / (double)totalSteps);

        if (step == totalSteps)
        {
            animating = false;
            return;
        }

        StateHasChanged();
        _ = UpdatePosition();
    }
    */
}
