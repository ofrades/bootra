@inject HttpClient HttpClient

<div class="dialog-shadow"></div>
<div class="dialog">
    <div class="dialog-body px-4 py-4">
        <div class="container">

            <div class="row py-4">
                <div class="col-md-3">
                    <img src="@Pizza.Special.ImageUrl" width="120" />
                </div>
                <div class="col-md-9">
                    <h4>@Pizza.Special.Name</h4>
                    <p>@Pizza.Special.Description</p>
                </div>
            </div>

            <form>
                <div class="row form-group">
                    <label class="col-md-4 col-form-label">Size:</label>
                    <div class="col-md-8">
                        <div class="btn-group btn-group-toggle" data-toggle="buttons">
                            @foreach (PizzaSize size in Enum.GetValues(typeof(PizzaSize)))
                            {
                                <label class="btn btn-secondary @(Pizza.Size == size ? "active" : "")">
                                    <input type="radio" name="size" autocomplete="off" value="@size" checked="@(Pizza.Size == size)" onchange="@SizeSelected" /> @(Pizza.GetSizeInInches(size))"
                                </label>
                            }
                        </div>
                        <label>£@(Pizza.GetBasePrice().ToString("0.00"))</label>
                    </div>
                </div>
                @if (AllToppings == null)
                {
                    <div class="row form-group">
                        <label class="col-md-4 col-form-label">Extra Toppings:</label>
                        <div class="col-md-8">
                            <select class="custom-select mr-sm-2">
                                <option value="-1" disabled selected>(loading...)</option>
                            </select>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row form-group">
                        <label class="col-md-4 col-form-label">Extra Toppings:</label>
                        <div class="col-md-8">
                            <select class="custom-select mr-sm-2" onchange="@ToppingSelected">
                                <option value="-1" disabled selected>(select)</option>
                                @for (var i = 0; i < AllToppings.Count; i++)
                                {
                                    <option value="@i">@AllToppings[i].Name - (£@(AllToppings[i].Price.ToString("0.00")))</option>
                                }
                            </select>
                        </div>
                    </div>
                }

                <div class="row form-group">
                    <div class="col-md-8 offset-md-4">
                        <ul class="list-group">
                            @foreach (var topping in Pizza.Toppings)
                            {
                                <li class="list-group-item">
                                    + @topping.Topping.Name <span class="font-weight-light">(£@(topping.Topping.Price.ToString("0.00")))</span><button type="button" class="btn btn-link" onclick="@(() => RemoveTopping(topping.Topping))">remove</button>
                                </li>
                            }
                        </ul>
                    </div>
                </div>

            </form>
        </div>
    </div>
    <div class="dialog-buttons px-4">
        <button class="btn btn-secondary mr-auto" onclick="@OnCancel">Cancel</button>
        <span class="font-weight-light mr-center">Price: £@(Pizza.GetTotalPrice().ToString("0.00"))</span>
        <button class="btn btn-primary ml-auto" onclick="@OnConfirm">Order ></button>
    </div>
</div>

@functions {
    [Parameter] List<Topping> AllToppings { get; set; }
    [Parameter] Pizza Pizza { get; set; }
    [Parameter] Action OnCancel { get; set; }
    [Parameter] Action OnConfirm { get; set; }

    protected async override Task OnInitAsync()
    {
        AllToppings = await HttpClient.GetJsonAsync<List<Topping>>("/toppings");
    }

    void SizeSelected(UIChangeEventArgs e)
    {
        if (Enum.TryParse<PizzaSize>((string)e.Value, out var size))
        {
            Pizza.Size = size;
        }
    }

    void ToppingSelected(UIChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            if (Pizza.Toppings.FindIndex(pt => pt.Topping == AllToppings[index]) < 0)
            {
                Pizza.Toppings.Add(new PizzaTopping() { Topping = AllToppings[index] });
            }
        }
    }

    void RemoveTopping(Topping topping)
    {
        Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);
    }
}
