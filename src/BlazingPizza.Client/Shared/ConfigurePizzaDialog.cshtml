@inject HttpClient HttpClient

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>@Pizza.Special.Name</h2>
            @Pizza.Special.Description
        </div>
        <form class="dialog-body">
            <div class="row form-group">
                <label class="col-md-4 col-form-label">Size:</label>
                <div class="col-md-6">
                    <input type="range" class="form-control-range" min="@Pizza.MinimumSize" max="@Pizza.MaximumSize" step="1" bind="Pizza.Size"/>
                </div>
                <div class="col-md-2">
                    <label>@(Pizza.Size)" £@(Pizza.GetFormattedTotalPrice())</label>
                </div>
            </div>
            @if (AllToppings == null)
            {
                <div class="row form-group">
                    <label class="col-md-4 col-form-label">Extra Toppings:</label>
                    <div class="col-md-8">
                        <select class="custom-select mr-sm-2">
                            <option value="-1" disabled selected>(loading...)</option>
                        </select>
                    </div>
                </div>
            }
            else
            {
                <div class="row form-group">
                    <label class="col-md-4 col-form-label">Extra Toppings:</label>
                    <div class="col-md-8">
                        @if (Pizza.Toppings.Count < 6)
                        {
                            <select class="custom-select mr-sm-2" onchange="@ToppingSelected">
                                <option value="-1" disabled selected>(select)</option>
                                @for (var i = 0; i < AllToppings.Count; i++)
                                {
                                    <option value="@i">@AllToppings[i].Name - (£@(AllToppings[i].GetFormattedPrice()))</option>
                                }
                            </select>
                        }
                        else
                        {
                            <div class="form-message">(maximum reached)</div>
                        }
                    </div>
                </div>
            }

            <div class="toppings">
                @foreach (var topping in Pizza.Toppings)
                {
                    <div class="topping">
                        @topping.Topping.Name
                        <span class="topping-price">@topping.Topping.GetFormattedPrice()</span>
                        <button type="button" class="delete-topping" onclick="@(() => RemoveTopping(topping.Topping))">x</button>
                    </div>
                }
            </div>
        </form>

        <div class="dialog-buttons px-4">
            <button class="btn btn-secondary mr-auto" onclick="@OnCancel">Cancel</button>
            <span class="mr-center">
                Price: <span class="price">@(Pizza.GetFormattedTotalPrice())</span>
            </span>
            <button class="btn btn-success ml-auto" onclick="@OnConfirm">Order ></button>
        </div>
    </div>
</div>

@functions {
    [Parameter] List<Topping> AllToppings { get; set; }
    [Parameter] Pizza Pizza { get; set; }
    [Parameter] Action OnCancel { get; set; }
    [Parameter] Action OnConfirm { get; set; }

    protected async override Task OnInitAsync()
    {
        AllToppings = await HttpClient.GetJsonAsync<List<Topping>>("/toppings");
    }

    void ToppingSelected(UIChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            if (Pizza.Toppings.FindIndex(pt => pt.Topping == AllToppings[index]) < 0)
            {
                Pizza.Toppings.Add(new PizzaTopping() { Topping = AllToppings[index] });
            }
        }
    }

    void RemoveTopping(Topping topping)
    {
        Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);
    }
}
