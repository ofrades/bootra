@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<div class="user-info">
    @if (currentUser == null)
    {
        <text>...</text>
    }
    else if (currentUser.IsLoggedIn)
    {
        <img src="img/user.svg" />
        <div>
            <span class="username">@currentUser.DisplayName</span>
            <a href="" onclick="@SignOut">Sign out</a>
        </div>
    }
    else
    {
        <button onclick="@SignIn" class="btn btn-default">Sign in</button>
    }
</div>

@functions {
    UserState currentUser;

    protected override async Task OnInitAsync()
    {
        currentUser = await HttpClient.GetJsonAsync<UserState>($"/user");
    }

    async Task SignIn()
    {
        await JSRuntime.InvokeAsync<object>("openLoginPopup", new DotNetObjectRef(this));
    }

    async Task SignOut()
    {
        // Transition UI to "loading" state synchronously
        currentUser = null;

        // ... then asynchronously update the server and the UI to match the outcome
        currentUser = await HttpClient.PutJsonAsync<UserState>($"/user/signout", null);
    }

    [JSInvokable]
    public void OnSignInStateChanged(UserState newUserState)
    {
        currentUser = newUserState;
        StateHasChanged();
    }
}
